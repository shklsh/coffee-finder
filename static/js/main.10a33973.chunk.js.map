{"version":3,"sources":["components/SearchAutoComplete.js","components/MapMarker.js","components/CoffeeSearchResult.js","components/ConstraintSlider.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["SearchAutoComplete","props","onSelect","value","state","geoCoderService","geocode","address","response","console","log","length","location","geometry","addMarker","lat","lng","markerName","handleSearch","autoCompleteService","sydneyLatLng","searchQuery","input","radius","getQueryPredictions","dataSource","map","resp","description","setState","suggestions","this","className","onSearch","placeholder","Component","MapMarker","name","key","type","theme","twoToneColor","CoffeeSearchResult","info","distanceText","openNow","photoUrl","priceLevel","rating","timeText","src","alt","disabled","defaultValue","character","ConstraintSlider","iconType","onChange","text","min","max","SYD_COOR","MainPage","updateConstraintName","event","preventDefault","prevConstraints","constraints","Object","assign","target","updateConstraintTime","time","prevMarkers","markers","newMarker","i","message","success","push","handleApiLoaded","maps","mapsLoaded","LatLng","places","AutocompleteService","placesService","PlacesService","Geocoder","directionService","DirectionsService","filteredResults","marker","timeLimit","markerLatLng","placesRequest","query","rankBy","RankBy","DISTANCE","textSearch","responseLimit","Math","coffeePlace","formatted_address","price_level","opening_hours","open_now","photos","getUrl","directionRequest","origin","destination","travelMode","route","result","status","travellingRoute","routes","legs","duration","distance","searchResults","warn","constraint","size","onClick","bootstrapURLKeys","libraries","defaultZoom","defaultCenter","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","App","classname","style","color","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10a33973.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AutoComplete } from 'antd';\n\nclass SearchAutoComplete extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            suggestions: [],\n            dataSource: [],\n            sydneyLatLng: this.props.sydneyLatLng,\n            autoCompleteService: this.props.autoCompleteService,\n            geoCoderService: this.props.geoCoderService,\n        }\n    }\n\n    // Runs after clicking away from the input field or pressing 'enter'.\n    // Geocode the location selected to be created as a marker.\n    onSelect = ((value) => {\n        this.state.geoCoderService.geocode({ address: value }, ((response) => {\n            console.log(response);\n            if(response.length > 0)\n            {\n                const { location } = response[0].geometry;\n                this.props.addMarker(location.lat(), location.lng(), this.props.markerName);\n            }\n        }))\n    });\n\n\n    // Runs a search on the current value as the user types in the AutoComplete field.\n    handleSearch = ((value) => {\n        const { autoCompleteService, sydneyLatLng } = this.state;\n        // Search only if there is a string\n        if (value.length > 0) {\n            const searchQuery = {\n                input: value,\n                location: sydneyLatLng, // Search in Sydney\n                radius: 30000, // With a 30km radius\n            };\n            autoCompleteService.getQueryPredictions(searchQuery, ((response) => {\n                // The name of each GoogleMaps suggestion object is in the \"description\" field\n                if (response) {\n                    const dataSource = response.map((resp) => resp.description);\n                    this.setState({ dataSource, suggestions: response });\n                }\n            }));\n        }\n    });\n\n    render() {\n        const { dataSource } = this.state;\n        return (\n            <AutoComplete\n                className=\"w-100\"\n                dataSource={dataSource}\n                onSelect={this.onSelect}\n                onSearch={this.handleSearch}\n                placeholder=\"Address\"\n            />\n        );\n    }\n}\n\nexport default SearchAutoComplete;","import React from 'react';\nimport { Icon } from 'antd';\n\nconst MapMarker = (({ name, key }) => {\n    return (\n        <div key={key}>\n            <span className=\"brand-red\">{name}</span>\n            <Icon className=\"font-1-5\" type=\"environment\" theme=\"twoTone\" twoToneColor=\"#fd0000\" />\n        </div>\n    );\n});\n\nexport default MapMarker;","import React from 'react';\nimport { Rate } from 'antd';\n\nconst CoffeeSearchResult = (({ info, key }) => {\n    const { address, distanceText, name, openNow, photoUrl, priceLevel, rating, timeText } = info;\n    return (\n        <div key={key} className=\"col-3 w-100 mx-4 my-4\">\n            <img src={photoUrl} className=\"image-wrapper-sm mb-2\" alt=\"coffee\" />            \n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{name}</h5>\n                    <span className=\"d-block mb-1\">{address}</span>\n                    <span className=\"d-block\">{distanceText}</span>\n                    <span className=\"d-block\">{timeText}</span>\n                </div>\n                <ul className=\"list-group list-group-flush\">\n                    {openNow ?\n                        <li className=\"list-group-item\">Open</li>\n                        :\n                        <li className=\"list-group-item\">Closed</li>\n                    }\n                    <li className=\"list-group-item\">Rating - <Rate value={rating} disabled defaultValue={2}/></li>\n                    <li className=\"list-group-item\">Price - <Rate value={priceLevel} character=\"$\" disabled defaultValue={2}/></li>\n                </ul>\n            </div>\n        </div>\n    );\n});\n\nexport default CoffeeSearchResult;","import React from 'react';\nimport { Icon, Slider } from 'antd';\n\nconst ConstraintSlider = (({ iconType, value, onChange, text }) => {\n    return (\n        <section className=\"d-flex flex-column\" >\n            <div className=\"d-flex w-100 align-items-center\">\n                <Icon className=\"font-1-5 mr-4\" type={iconType} />\n                <Slider className=\"w-100\" value={value} min={0} max={60} onChange={onChange} />\n            </div>\n            <span className=\"text-center\">{text}</span>\n        </section >\n    );\n});\n\nexport default ConstraintSlider;","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport SearchAutoComplete from './SearchAutoComplete';\nimport MapMarker from './MapMarker';\nimport CoffeeSearchResult from './CoffeeSearchResult';\nimport ConstraintSlider from './ConstraintSlider';\n\nimport { Button, Input, Divider, message } from 'antd';\n\nconst SYD_COOR = { lat: -33.8699, lng: 151.2087 };\n\nclass MainPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            constraints: [{ name: '', time: 0 }],\n            searchResults: [],\n            mapsLoaded: false,\n            markers: [],\n            map: {},\n            maps: {},\n            sydneyLatLng: {},\n            autoCompleteService: {},\n            placesService: {},\n            geoCoderService: {},\n            directionService: {},\n        };\n    }\n\n    // Update name for constraint with index === key\n    updateConstraintName = ((event, key) => {\n        event.preventDefault();\n        const prevConstraints = this.state.constraints;\n        const constraints = Object.assign([], prevConstraints);\n        constraints[key].name = event.target.value;\n        this.setState({ constraints });\n    });\n\n    // Updates distance (in KM) for constraint with index == key\n    updateConstraintTime = ((key, value) => {\n        const prevConstraints = this.state.constraints;\n        const constraints = Object.assign([], prevConstraints);\n        constraints[key].time = value;\n        this.setState({ constraints });\n    });\n\n    // Adds a Marker to the GoogleMaps component\n    addMarker = ((lat, lng, name) => {\n        const prevMarkers = this.state.markers;\n        const markers = Object.assign([], prevMarkers);\n\n        // If name already exists in marker list just replace lat & lng.\n        let newMarker = true;\n        for (let i = 0; i < markers.length; i++) {\n            if (markers[i].name === name) {\n                newMarker = false;\n                markers[i].lat = lat;\n                markers[i].lng = lng;\n                message.success(`Updated \"${name}\" Marker`);\n                break;\n            }\n        }\n        // Name does not exist in marker list. Create new marker\n        if (newMarker) {\n            markers.push({ lat, lng, name });\n            message.success(`Added new \"${name}\" Marker`);\n        }\n\n        this.setState({ markers });\n    });\n\n    // Runs once when the Google Maps library is ready\n    // Initializes all services that we need\n    handleApiLoaded = ((map, maps) => {\n        this.setState({\n            mapsLoaded: true,\n            map,\n            maps,\n            sydneyLatLng: new maps.LatLng(SYD_COOR.lat, SYD_COOR.lng),\n            autoCompleteService: new maps.places.AutocompleteService(),\n            placesService: new maps.places.PlacesService(map),\n            geoCoderService: new maps.Geocoder(),\n            directionService: new maps.DirectionsService(),\n        });\n    });\n\n    // With the constraints, find some places serving coffee\n    handleSearch = (() => {\n        const { markers, constraints, placesService, directionService, maps } = this.state;\n        if (markers.length === 0) {\n            message.warn('Fill in blank search bar and try again!');\n            return;\n        }\n        const filteredResults = [];\n        const marker = markers[0];\n        const timeLimit = constraints[0].time;\n        const markerLatLng = new maps.LatLng(marker.lat, marker.lng);\n\n        const placesRequest = {\n            location: markerLatLng,\n            type: ['cafe'], \n            query: 'coffee',\n            rankBy: maps.places.RankBy.DISTANCE, \n        };\n\n        // First, search for coffee shops.\n        placesService.textSearch(placesRequest, ((response) => {\n            // Only look at the nearest top 10.\n            const responseLimit = Math.min(10, response.length);\n            for (let i = 0; i < responseLimit; i++) {\n                const coffeePlace = response[i];\n                const { rating, name } = coffeePlace;\n                const address = coffeePlace.formatted_address; // e.g 100 George St,\n                const priceLevel = coffeePlace.price_level; // 1, 2, 3...\n                let photoUrl = '';\n                let openNow = false;\n                if (coffeePlace.opening_hours) {\n                    openNow = coffeePlace.opening_hours.open_now; // e.g true/false\n                }\n                if (coffeePlace.photos && coffeePlace.photos.length > 0) {\n                    photoUrl = coffeePlace.photos[0].getUrl();\n                }\n\n                // Second, For each coffeePlace, check if it is within acceptable travelling distance\n                const directionRequest = {\n                    origin: markerLatLng,\n                    destination: address, // Address of coffee place\n                    travelMode: 'WALKING',\n                }\n                directionService.route(directionRequest, ((result, status) => {\n                    if (status !== 'OK') { return }\n                    const travellingRoute = result.routes[0].legs[0]; // { duration: { text: 1mins, value: 600 } }\n                    const travellingTimeInMinutes = travellingRoute.duration.value / 60;\n                    if (travellingTimeInMinutes < timeLimit) {\n                        const distanceText = travellingRoute.distance.text; // 6.4km\n                        const timeText = travellingRoute.duration.text; // 11 mins\n                        filteredResults.push({\n                            name,\n                            rating,\n                            address,\n                            openNow,\n                            priceLevel,\n                            photoUrl,\n                            distanceText,\n                            timeText,\n                        });\n                    }\n                    // Finally, Add results to state\n                    this.setState({ searchResults: filteredResults });\n                }));\n            }\n        }));\n    });\n\n    render() {\n        const { constraints, mapsLoaded, sydneyLatLng, markers, searchResults } = this.state;\n        const { autoCompleteService, geoCoderService } = this.state; // Google Maps Services\n        return (\n            <flexbox className=\"w-100 d-flex py-4 flex-wrap justify-content-center\">\n                {/* <h1 className=\"w-100 fw-md\">Find Coffee</h1> */}\n                {/* Constraints section */}\n                <section className=\"col-6\">\n                    {mapsLoaded ?\n                        <div>\n                            {constraints.map((constraint, key) => {\n                                const { name, time } = constraint;\n                                return (\n                                    <div key={key} className=\"mb-4\">\n                                        <div className=\"d-flex mb-2\">\n                                            <Input className=\"col-4 mr-2\" placeholder=\"Name\" onChange={(event) => this.updateConstraintName(event, key)} />\n                                            <SearchAutoComplete\n                                                autoCompleteService={autoCompleteService}\n                                                geoCoderService={geoCoderService}\n                                                sydneyLatLng={sydneyLatLng}\n                                                markerName={name}\n                                                addMarker={this.addMarker}\n                                            />\n                                        </div>\n                                        <ConstraintSlider \n                                             iconType=\"car\"\n                                             value={time}\n                                             onChange={(value) => this.updateConstraintTime(key, value)}\n                                             text=\"Minutes away by drive\"\n                                        />\n                                        {/* <Divider /> */}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        : null\n                    }\n                </section>\n                \n                {/* Search Button */}\n                <Button className=\"mt-4 fw-md\" type=\"default\" size=\"default\" onClick={this.handleSearch}>Search</Button>\n\n                {/* Maps Section */}\n                {/* <section className=\"col-6 h-lg\"> */}\n                    <GoogleMapReact\n                        bootstrapURLKeys={{\n                            key: 'AIzaSyDivRtB90ronhSWEPkwSt8lG-SaVlntvI4',\n                            libraries: ['places', 'directions']\n                        }}\n                        defaultZoom={11}\n                        defaultCenter={{ lat: SYD_COOR.lat, lng: SYD_COOR.lng }}\n                        yesIWantToUseGoogleMapApiInternals={true}\n                        onGoogleApiLoaded={({ map, maps }) => this.handleApiLoaded(map, maps)} \n                    >\n                        {/* Pin markers on the Map*/}\n                        {markers.map((marker, key) => {\n                            const { name, lat, lng } = marker;\n                            return (\n                                <MapMarker key={key} name={name} lat={lat} lng={lng} />\n                            );\n                        })}\n                    </GoogleMapReact>\n                {/* </section> */}\n\n                {/* Results section */}\n                {searchResults.length > 0 ?\n                    <>\n                        <Divider />\n                        <section className=\"col-12\">\n                            <div className=\"d-flex flex-column justify-content-center\">\n                                <h1 className=\"mb-4 fw-md\">10 Coffee shops nearby</h1>\n                                <div className=\"d-flex flex-wrap\">\n                                    {searchResults.map((result, key) => (\n                                        <CoffeeSearchResult info={result} key={key} />\n                                    ))}\n                                </div>\n                            </div>\n                        </section>\n                    </>\n                    : null}\n            </flexbox>\n        )\n    }\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport MainPage from './components/MainPage';\nimport { Button, Input, Divider, message } from 'antd';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport 'antd/dist/antd.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <div classname=\"header\">\n            <h1 className=\"mb-4 fw-md\" style={{color:\"brown\"}}>Coffee Finder</h1> \n            {/* <img src=\"/coffee_icon2.png\" alt=\"image\" />  */}\n          </div>  \n          <img src='https://media.istockphoto.com/photos/espresso-coffee-cup-with-beans-on-vintage-table-picture-id664313320?k=6&m=664313320&s=612x612&w=0&h=moC0a_8D-s62K72DceEnSFMx413HfTouZDzri7n7aA8=' className=\"image-wrapper-sm mb-2\" alt=\"coffee\" />            \n          <MainPage />\n      </div>\n      \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}